<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MORIZOTTER PRESS]]></title>
  <link href="http://morizotter.com/atom.xml" rel="self"/>
  <link href="http://morizotter.com/"/>
  <updated>2012-10-07T01:57:24+09:00</updated>
  <id>http://morizotter.com/</id>
  <author>
    <name><![CDATA[morizotter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[facebookの投稿]]></title>
    <link href="http://morizotter.com/blog/2012/10/07/facebook-publish/"/>
    <updated>2012-10-07T00:37:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/10/07/facebook-publish</id>
    <content type="html"><![CDATA[<p><a href="http://www.morizotter.com/blog/2012/10/06/facebook/">facebookのログイン</a>ができたので次は投稿に挑戦しました。これも、Facebookの公式ページにそって学んだらすぐに出来ました。</p>

<ul>
<li><a href="https://developers.facebook.com/docs/howtos/publish-to-feed-ios-sdk/">Publish to Feed</a></li>
<li><a href="https://developers.facebook.com/docs/howtos/ios-6/">Using the Facebook integration in iOS 6</a></li>
</ul>


<p>とりあえず、最初のリンクでiOS6以前のベースを作って、最後のリンクでiOS6の場合の投稿処理の場合分けを実装という流れですね。</p>

<p>iOS6の場合、端末にFacebookの情報を入れていないとiOS6以前の投稿フォームが出てくるという感じになります。ちょっと混乱したのは、iOS6で端末に情報がある状態でアプリでFacebookを使わないという設定にしているのにiOS6だと投稿ができてしまうという点です。ただ、考えてみたらFacebookの情報を使うことはできないようになっていたのでこれでいいんでしょうね。投稿するしないはユーザが判断することでアプリ側としてはFacebookから何も情報を取得していないので。</p>

<p>グラフ処理にも手を出してみようか。でも、すぐに使う事にはならないと思うので</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[facebookのログインについて]]></title>
    <link href="http://morizotter.com/blog/2012/10/06/facebook/"/>
    <updated>2012-10-06T19:38:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/10/06/facebook</id>
    <content type="html"><![CDATA[<p>今日はフェイスブックのログイン認証について学んでます。今までFacebookのSDKには苦手意識があって、やるといっても必要に迫られてサンプルからつまみ食いするような形でしか利用していませんでした。ログインのフローがよくわからなかったんですよね！それが今日恐らく解消しました！！</p>

<p>なんで解消したかというと、単純に公式のHowToに沿ってやっただけなんです。これ。</p>

<p><a href="https://developers.facebook.com/docs/howtos/login-with-facebook-using-ios-sdk/">Facebook Login</a></p>

<p>なんで最初からこれやらなかったんだって感じました。Facebook SDK 3.1も非常に良く出来ていて、</p>

<ol>
<li>iOS6の場合</li>
<li>Facebookアプリが端末にある場合</li>
<li>Facebookアプリが端末にない場合</li>
</ol>


<p>すべてのケースを判定してログイン処理をしてくれます（＞＜）</p>

<p>これがほんの1時間ちょっとで実装できました！なんてこと！</p>

<p>で、まぁ、実装中にほとんど躓きはなかったんですが多少他の人の役に立ちそうなことを2点記します。</p>

<p><strong>Facebookをgitでcloneした場合にFacebook.frameworkが存在しない問題について</strong></p>

<p>SDKはgitでcloneするのがいいですよね。これでSDKを最新の状態に保つことができます。僕はAppsディレクトリの直下にframeworkというディレクトリを作ってそこに入れていくことにしました。で、とりあえずFacebook.frameworkをcloneしたディレクトリ内で探したけどなかったのです。まぁ、この解決方法は単純にscriptsディレクトリの中の<strong>build_framework.sh</strong>を実行するだけで解消します。まぁcloneする人にはこのくらいは説明いらずかもしれませんね。僕は少し迷いました。</p>

<p><strong>ログインを実行しようとすると&#8221;The operation couldn&#8217;t be completed. (com.facebook.sdk error 2.)&#8221;というエラーが出る</strong></p>

<p>はい、これはStackoverflowに回答がありました。FacebookアプリのネイティブiOSアプリの<strong>Bundle ID</strong>をちゃんと入力すればいいんです。以前はこれ入力しなくても動いたような気がします。iOS6だとダメみたいです。</p>

<p>こんなところです。</p>

<p>Facebookログインのフローを理解して実装できたのでハッピーです！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stackoverflowってすごい！編集とか]]></title>
    <link href="http://morizotter.com/blog/2012/10/06/stackoverflow-edit/"/>
    <updated>2012-10-06T19:21:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/10/06/stackoverflow-edit</id>
    <content type="html"><![CDATA[<p>今日は<a href="http://stackoverflow.com/">Stackoverflow</a>についてちょっと驚いたことがあったので書いてます。僕はまだまだ初心者でかなりやれることが限れれている（他人の質問にコメントさえできない汗）のですが、使いこなしていきたいと思いました。</p>

<p>その理由はこれ、</p>

<p> <img class="center" src="http://dl.dropbox.com/u/8131276/octopress/stackoverflow-edit.png">
 
<a href="http://stackoverflow.com/questions/12411758/how-to-manipulate-views-while-for-loop">僕の書いた質問文</a>が編集されました（＞＜）。プログラミング英語の勉強にもなっちゃう！すげ。ちなみに、僕の質問がレビューされた経緯がある。ぐは。</p>

<p><a href="http://stackoverflow.com/posts/12411758/revisions">Revisions</a></p>

<p>すごいわ。</p>

<p>よし、後で誰かの疑問に答えてレピュテーションあげてもっとコミットしよう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOSX Mountain Lionのクリーンインストールってこんなに簡単だったのね]]></title>
    <link href="http://morizotter.com/blog/2012/09/29/clean-install/"/>
    <updated>2012-09-29T00:29:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/09/29/clean-install</id>
    <content type="html"><![CDATA[<p>以前使っていたMacBookAir 11-inch Late 2010を売りに出すことにした。MacbookAir2012を買ってから、ほとんど開いてないんだけど、何かの時に使うこともあるかも！？なんて思って、そのままにしていたのだけど、その後1度も使いたいと思う機会がなかったので。</p>

<p>で、とりあえず中身を初期化することにしました。Macを初期化なんて僕は今まであまりやったことがなかったので、メモとして記録しておきます。</p>

<p>参考にしたのはこのサイトです。</p>

<ul>
<li><a href="http://wayohoo.com/mac/tips/how-to-clean-install-os-x-mountain-lion.html">OS X Mountain Lion（マウンテンライオン）をクリーンインストールする方法</a></li>
</ul>


<p>ほんとにこの手順でやるだけでした。いやー、クリーンインストールってこんなに簡単だったんですね！この記事は画像もあってわかりやすいですし、僕が他に書くことはありません。自分記録として一応残しておきます！</p>

<p>追記が生まれそうです。</p>

<p>【追記】</p>

<p>自宅のiMacも同様の方法でクリーンインストールしました。Timemachineでバックアップを取っていたので、ストレスを感じることなく出来るってのもいいですね。こちらもMountain Lionにしてから、アプリが強制終了したりFinderがDockから開かなかったり、通信が不安定になったりいろいろ問題がありましたが、今のところ快適な使い心地です！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RocketDocsはいいかもしれない]]></title>
    <link href="http://morizotter.com/blog/2012/09/26/rocketdocs/"/>
    <updated>2012-09-26T02:28:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/09/26/rocketdocs</id>
    <content type="html"><![CDATA[<p>GoogleDriveってMacに入ってるけど（入れたけど）ほとんど使う機会がない。新たに何かを追加しようとすると、以前GoogleDocsとかの時代に使っていたファイルが散乱していて追加したい気分が一気にしぼむ。フォルダ分けとかきちんとやればいいんだけど、やっぱり、ウェブで使ってなんぼという気がしてしまう。でも、ウェブで使うとGoogleのアカウントが多すぎて、メインで使ってるアカウントでDocsを開くためにログインしなおしたり。。。面倒。だってクラウドは既にDropboxがあるし、、、。</p>

<p><img class="left" src="http://dl.dropbox.com/u/8131276/octopress/RocketDocs.png"></p>

<p><a href="http://click.linksynergy.com/fs-bin/stat?id=dc7i2jvUYME&offerid=94348&type=3&subid=0&tmpid=2192&RD_PARM1=http%253A%252F%252Fitunes.apple.com%252Fjp%252Fapp%252Frocketdocs-google-docs-client%252Fid505954267%253Fmt%253D12%2526uo%253D4%2526partnerId%253D30" target="itunes_store">RocketDocs - A Google Docs™ Client - Tricky Duck Ltd</a></p>

<p>だけど、今日このアプリを入れてからちょっと印象が変わりました。なんという事はないのです。このアプリはGoogleDocsのウェブページをブラウザとは別の個別のウィンドウに表示してくれるだけなのです。でも、そこからファイルの作成などいろいろ必要なことができる。ちょっと使ってみて気にいったポイントは以下の通りです。</p>

<ol>
<li><strong>固定のアカウントでウィンドウが開く</strong>のでいちいちログイン・ログアウトをする必要がない！</li>
<li>MenuBarに常駐してくれるので、開きたい時に開ける。</li>
<li>ファイルの作成時にはRocketDocsのウィンドウ内のタブで新たなページが作成されるのですっきり。</li>
</ol>


<p>とこんな感じ。特に1が大事ですね。ログイン・ログアウト本当に面倒ですから。</p>

<p>で、まぁ、ここまで行っても、実際にGoogleDocsのエディタでGoogleDocsの形式のファイルを作る必要ないじゃんとまぁ思うわけなんですが、用途がある人にはあるのです。私の場合はAwesome NoteというiOSアプリで思いついたことを記録しているのですが、これをGoogleDocsと同期させているんですね。バックアップとして。Awesome NoteってNoteアプリ最強じゃないかと思い込んでしまうくらい使いやすいんです。他のメモ使えないんです。特に思いつきメモに特化した場合。GoogleDocsで書けば、アプリ側にも反映されるし同じような感覚で使えるのです。こういう特殊な用途がある人にとってはGoogleDocsが使い易くなるというだけでだいぶメリットがあるんじゃないかなぁと思うわけです。</p>

<p>RocketDocsのビューはこんな感じ。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/RocketDocsView.png" width="500"></p>

<p>気になったら試してみてください。</p>

<ul>
<li><a href="http://click.linksynergy.com/fs-bin/stat?id=dc7i2jvUYME&offerid=94348&type=3&subid=0&tmpid=2192&RD_PARM1=http%253A%252F%252Fitunes.apple.com%252Fjp%252Fapp%252Frocketdocs-google-docs-client%252Fid505954267%253Fmt%253D12%2526uo%253D4%2526partnerId%253D30" target="itunes_store">RocketDocs - A Google Docs™ Client - Tricky Duck Ltd</a></li>
<li>ついでに、<a href="http://click.linksynergy.com/fs-bin/stat?id=dc7i2jvUYME&offerid=94348&type=3&subid=0&tmpid=2192&RD_PARM1=http%253A%252F%252Fitunes.apple.com%252Fjp%252Fapp%252Fawesome-note-%252Bto-do-calendar%252Fid320203391%253Fmt%253D8%2526uo%253D4%2526partnerId%253D30" target="itunes_store">Awesome Note (+To-do/Calendar/Evernote) - BRID</a></li>
</ul>


<p>* リンクはアフィリエイトなのでちょっと嫌な方は直接MacAppStoreでどうぞ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS用LogViewerをgithubに公開しました]]></title>
    <link href="http://morizotter.com/blog/2012/09/17/logviewer/"/>
    <updated>2012-09-17T17:12:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/09/17/logviewer</id>
    <content type="html"><![CDATA[<p>苦節数日ですが、iOS学習中に思いついたLogViewerをgithubに公開してみました。Xcodeのコンソールに表示されるログをアプリ上でも見ることができるというモジュールで、開発ビギナーやMacと離れた場所での動作確認向けのモジュールになっています。初めてのモジュール公開なので、いろいろおかしな所もあるかと思いますが、徐々に修正していければいいなと考えています。</p>

<p><a href="https://github.com/morizotter/LogViewer">LogViewer - Github</a></p>

<p>Github上のREADME.mdで紹介はしていますが、まだ英語版しかできていないので簡単に説明します。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/logviewer1.png" width="300" title="" ></p>

<p>見た目はこんな感じです。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/logviewer2.png" width="300" title="" ></p>

<p>小さくもできます。</p>

<p>不要なときはオフにしたり、色を変えたり、ログに日時を表示するかどうかなどが簡単に選択できるようになっています。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/logviewer_header.png" width="400" title="" ></p>

<p>ヘッダーはこんな感じです。たぶん、おかしな書き方してると思いますがそれっぽいかなとｗ</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/logviewer_readme.png" width="500" title="" ></p>

<p>READMEです。これも公開されているリポジトリを参考に頑張りました。ライセンスも一応書いておこうと思い、専用のBSDライセンスファイルを作りました。はぁはぁ。</p>

<p>とにかくまずはそれっぽく作って、内容は徐々に良くしていきたいと思います。</p>

<p><a href="https://github.com/morizotter/LogViewer">LogViewer - Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSのログをデバッグ時にアプリで見る]]></title>
    <link href="http://morizotter.com/blog/2012/09/10/making-logviewer/"/>
    <updated>2012-09-10T02:21:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/09/10/making-logviewer</id>
    <content type="html"><![CDATA[<p>勉強も兼ねていろいろiOSアプリの部品を作ったりしているんだけど、その副産物としてLogViewerってのができそう。Logをコンソールじゃなくてアプリに表示するって感じ。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/logViewerMax.png" width="300"></p>

<p>サイズ変更とかも一応できる。常に全面だと邪魔だしアプリ操作できなかったら意味ないし。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/logViewerSmall.png" width="300"></p>

<p>近日中にgithubで公開しようと思います！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TwitterBootstrapについて]]></title>
    <link href="http://morizotter.com/blog/2012/09/03/about-twitter-bootstarap/"/>
    <updated>2012-09-03T23:00:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/09/03/about-twitter-bootstarap</id>
    <content type="html"><![CDATA[<p>使いたいと思っているが、なかなか手を出せていない。電車の中などまとまった時間が取れない時にちょっとずつドキュメントでも読むかな。で、ちょっとずつスニペットでも登録していこう。</p>

<p><a href="http://twitter.github.com/bootstrap/getting-started.html">Twitter Bootstrap - Getting started</a></p>

<p>はやくこれ使いこなしたいぜ！Dashでスニペット登録しちゃえば、サクサク作れそう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Textmate2でrubyを実行する]]></title>
    <link href="http://morizotter.com/blog/2012/09/03/textmate2-ruby-run/"/>
    <updated>2012-09-03T00:16:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/09/03/textmate2-ruby-run</id>
    <content type="html"><![CDATA[<p><a href="http://www.morizotter.com/blog/2012/09/02/textamate2/">前回の記事</a>でTextmate2のビルドを書きましたが、今回は続きでRubyの実行(Run)についてです。</p>

<p>そのまま実行（⌘+R）すると、</p>

<pre><code>Support/TextMate/Managed/Bundles/Ruby.tmbundle/Support/RubyMate/run_script.rb:1: undefined method `+' for nil:NilClass (NoMethodError)
</code></pre>

<p>というエラーが出て先に進みません。いろいろ試行錯誤した結果これを解消する方法が見つかりました。</p>

<p>まずは、PreferencesのBundlesで<code>Bundle Support</code>にチェックを入れます！</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/textmate2rubyrun.png"></p>

<p>そして、設定を変更します。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/textmate2rubyversion.png"></p>

<p>上記の3つはあったほうがよさそうです。これで希望のバージョンで実行することができます。このまま実行すると、以前は別画面で表示されていた実行ウィンドウがテキストウィンドウの下に表示されます。ちょっと邪魔なので、分離する方法を見つけました。</p>

<pre><code>defaults write com.macromates.TextMate.preview htmlOutputPlacement window
</code></pre>

<p>ターミナルで上記コマンドをそのまま貼り付けて実行するだけです。<a href="http://superuser.com/questions/367851/how-to-move-textmate-2-output-pane-to-a-new-window">Stackoverflow</a>情報です。さて実行。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/textmate2run.png"></p>

<p>こんな感じです。初代と変わらないですね！</p>

<p>解決のヒントになったのは<a href="http://comments.gmane.org/gmane.editors.textmate.general/34487">この記事</a>です。ありがとうございました！</p>

<p>これに3時間は悩まされた。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Textamate2のインストール]]></title>
    <link href="http://morizotter.com/blog/2012/09/02/textamate2/"/>
    <updated>2012-09-02T20:20:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/09/02/textamate2</id>
    <content type="html"><![CDATA[<p>もう、半月以上前になりますがTextmate2がgithubで公開されたことを知りました。ずっとインストールしたいと思っていたのですが、後回しになっていました。やっと出来ます。</p>

<p>参考にしたのはこちらのサイト</p>

<ul>
<li><a href="https://github.com/textmate/textmate">公式</a></li>
<li><a href="http://tools4hack.santalab.me/howto-oss-textmate-build.html">[Mac] オープンソース化なテキストエディタ「TextMate 2」をビルドした手順メモ</a></li>
<li><a href="http://blog.f13.jp/post/29942351173/textmate-2">TextMate 2をソースからコンパイルしてみる</a></li>
</ul>


<p>基本は、2つめのサイトを参考にしてやったのですが、少し違うやり方を取ったところもあるのでメモを残しておきます。</p>

<h3>gitからクローンします</h3>

<p>作業スペースはデスクトップでやりました。クローンして、フォルダの中に移動します。</p>

<pre><code>cd ~/Desktop
git clone git://github.com/textmate/textmate.git
cd textmate/
</code></pre>

<p>参考サイトには、<code>git clone https://github.com/textmate/textmate.git</code>とあったのですが、自分の環境ではhttps:が失敗したので<code>git:</code>でやりました。</p>

<h3>必要なものをインストールします</h3>

<p>最初失敗していたのですが、参考サイトの3つめを見て<code>brew update</code>したところ成功しました。</p>

<pre><code>$ brew update
$ brew install ragel boost multimarkdown hg ninja
</code></pre>

<h3>混沌</h3>

<p>もしこのブログを参考にされている方がいれば、この混沌の箇所は飛ばして先にビルドをしてみてください。僕はここで恐らく無駄なことをしてつまずきました。</p>

<h3>ビルド！</h3>

<p>公式にあるとおりに下記の処理を実行して成功です！</p>

<pre><code>git submodule update --init
./configure &amp;&amp; ninja
</code></pre>

<p>Applicationsフォルダに移動して完了!</p>

<pre><code>cp -r ~/build/TextMate/Applications/TextMate/TextMate.app /Applications/
</code></pre>

<h3>とりあえず設定</h3>

<p>やった成功！日本語の入力も問題なし！</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/textmate2japanese.png"></p>

<p>ということで、初期設定をちょこっとやります。</p>

<p>まずPreferencesのTerminalでPathを設定します。これで、<code>mate</code>が使えるようになります。</p>

<p>テーマについてですが、変えられないのかな！？と思ったところ発見しました！これもPreferencesのBundlesでThemesタブをクリックすると選択肢が出てくるので、チエックすればインストールされます。インストールされたThemeはViewから適用できます。とりあえず昔使ってたのに近い<code>Blackboard</code>にしました！<code>Oceanic</code>も良かったけど。</p>

<p>あとは、Runの設定です。これ苦戦しました。ですがなんとか解決です。これについては躓く人もいると思いますので、<a href="http://www.morizotter.com/blog/2012/09/03/textmate2-ruby-run/">別記事</a>で書こうと思います。</p>

<h3>つまずきメモ</h3>

<p>混沌の箇所ではまっていた部分です。。。</p>

<p>(あとで分かったのですがMountain Lionではやっぱり以下の処理はいらないかも)</p>

<p>ここでビルドしようとしたのですが失敗しました。公式にあるようにproctoolsを入れないといけないようです。Lionの場合とあったのでやらなかったのですが、Mountain Lionでも同様の様子。</p>

<pre><code>brew install proctools
</code></pre>

<p>ぐは、<code>Failed executing: bsdmake</code>というエラーが出ました。メッセージにある通り<code>brew doctor</code>を実行。<code>libtool</code>ってのの依存関係がおかしいと合ったので<code>brew install</code>を。</p>

<pre><code>brew doctor
brew install libtool
</code></pre>

<p>成功！でも、<code>brew install proctools</code>は再度失敗。再度<code>brew doctor</code>を行ったところ、パスの順番を変えてみればということだったので、<a href="http://d.hatena.ne.jp/koseki2/20081201/macportPath">こちら</a>を参考に/usr/local/binを前に（以前やったはずだけどMLインストールの時にリセットされたのかな？？）。で、<code>brew doctor</code>ではエラーはなくなったけど<code>proctools</code>のインストールには失敗する。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dashが快適！]]></title>
    <link href="http://morizotter.com/blog/2012/07/26/dash/"/>
    <updated>2012-07-26T00:52:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/26/dash</id>
    <content type="html"><![CDATA[<p>先日、Macおすすめアプリって記事をどこかで見て入れたのがDash。プログラミング言語の閲覧とコードスニペットの管理が主な用途ですが、利用開始直後からかなりよい具合で愛してます。</p>

<p><img src="http://dl.dropbox.com/u/8131276/octopress/dash.png"></p>

<p>とりあえず今貼りつけた画像は、ドキュメント表示画面です。検索早いです。そして、<code>option+Space</code>でDash自体が一発起動するってのも素敵です。</p>

<p>スニペット管理画面もあります。ここにスニペットを書き込めば指定した文字を打つと即コードが差し込まれます。スニペット中に<code>__</code>で囲んだ文字、例えば<code>__filename__</code>なんてやると、スニペットを差し込む前にその部分が選択されて自由に差し込めるようになっています。</p>

<h2>Dropboxで共有</h2>

<p>スニペットを格納したファイルはDropboxに入れることで、複数のMacで情報を共有できます。わかりやすいサイトを見つけたので興味のある方はご参考に。</p>

<ul>
<li><a href="http://fujitaiju.com/blog/%E3%82%A2%E3%83%97%E3%83%AA/%E5%A4%AAmac%E7%94%A8%E3%82%B9%E3%83%8B%E3%83%9A%E3%83%83%E3%83%88%E3%82%A2%E3%83%97%E3%83%AAdashexpander%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92dropbox%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E5%90%8C/">[太]Mac用スニペットアプリDashExpanderの設定をDropboxを使って同期する方法。</a></li>
</ul>


<p>基本的にどの動作も非常に簡単でよく考えられてるって印象です。あー、でも一つだけよくわからずいらっときている点が。PreferencesのSnippetsにある<code>enable snippet detection</code>をオンにすると何が変わるのか。うううー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xcode4.4でコード補完できなくなる問題が解消！？]]></title>
    <link href="http://morizotter.com/blog/2012/07/26/xcode4-dot-4/"/>
    <updated>2012-07-26T00:20:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/26/xcode4-dot-4</id>
    <content type="html"><![CDATA[<p>おお、Xcodeのアップデート文を読んでいたら嬉しい一文を発見！</p>

<p><img src="http://dl.dropbox.com/u/8131276/octopress/xcode44.png"></p>

<p>赤枠内です。コード補完ができなくなる問題を解消と書いてあります。</p>

<pre><code>Fixes an issue where code completion could fail, requiring the user to delete derived data.
</code></pre>

<p>&#8220;ユーザにderived dataの削除を要求する&#8221;って、そういう状況に追い込まれた人にはすっと入り込むわかりやすいフレーズ。この問題に何度悩まされたことか！でも、derived dataを削除したくらいじゃ回復しなかったこともあったしなぁ。</p>

<p>そういうのが起こらないようになってるならすごくいいアップデート！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[textMateでテスト実行時のRubyのバージョンを変更する！]]></title>
    <link href="http://morizotter.com/blog/2012/07/23/textmate-ruby-version/"/>
    <updated>2012-07-23T00:45:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/23/textmate-ruby-version</id>
    <content type="html"><![CDATA[<p>こんにちは。Ruby初心者です！Rubyを始めてとりあえずエディタを探していたのですが、vimは初期設定が難しいしファイル間の移動が面倒だし、NetBeansは大げさだしということでtextMateに落ち着きそうです。で、使っているうちに最初の問題に遭遇しました。</p>

<h2>実行(⌘+r)時に古いRubyで実行してる</h2>

<p>問題が発覚したのは、<a href="http://www.amazon.co.jp/gp/product/4797336617/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4797336617&linkCode=as2&tag=nettoshinjiyu-22">たのしいRuby 第2版 Rubyではじめる気軽なプログラミング</a><img src="http://www.assoc-amazon.jp/e/ir?t=nettoshinjiyu-22&l=as2&o=9&a=4797336617" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />の記述通りにコードを書いているのに、なぜか実行時に失敗するということが続いたからです。</p>

<p><code>Command+R</code>時に表示されるウィンドウを見るとRubyのバージョンが表示されていました。</p>

<p><img src="http://dl.dropbox.com/u/8131276/octopress/textMateversion.png"></p>

<p><em>画像は修正後のものです。赤枠内が古いバージョンを示していました</em></p>

<p>これが古かったんです。それでおそらく<code>require</code>が失敗していたんだと思います。とりあえず、terminalで実行した場合は成功するので、普段使っている<code>ruby 1.9.3p194</code>に変えればよいだろうということで、ネットで情報を探しました。</p>

<p>なかなか見つからなかったのですが、下記の記事に回答に近いものがありました。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/6546308/how-do-i-change-the-ruby-version-textmate-uses">How do I change the Ruby version Textmate uses?</a></li>
</ul>


<p>方法としては、</p>

<ol>
<li>textMateのPreference>Advanced>Shell Variablesに移動する</li>
<li>titleを<code>TM_RUBY</code>として、rubyのパスを入力する</li>
</ol>


<p>これだけで完了です。ただ僕はここで少しつまずきました。rubyの場所を</p>

<pre><code>$ which ruby
</code></pre>

<p>で調べると、</p>

<pre><code>/Users/myname/.rbenv/shims/ruby
</code></pre>

<p>と出てきたので、最初これを指定したのですがエラーになりました。おそらくこれはただの参照だからダメだったんだと思います（詳しい方教えて下さい＞＜）。下記のように入力することで成功しました。</p>

<pre><code>/Users/myname/.rbenv/versions/1.9.3-p194/bin/ruby
</code></pre>

<p>これで、実行すると対処の画像の用に指定したRubyのバージョンで実行ができます。ふー、わざわざターミナルで実行するよりも一画面で実行できるのでストレスなく効率的にテストができます！わーい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[textMateのcontrol+f]]></title>
    <link href="http://morizotter.com/blog/2012/07/20/textmate-control-f/"/>
    <updated>2012-07-20T03:34:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/20/textmate-control-f</id>
    <content type="html"><![CDATA[<p>textMateはMacやEmacsと同じように<code>Ctr+f,b,p,n</code>でサクサク動けると思ったんだけど、思ったんだけど、なんか変。止まる。なんか表示される。調べてみると、<code>Ctr+f</code>の設定が変わったということ。今は定義を調べるコマンドになっているらしい。そこで、下記のサイトを参考に、ショートカットキーの設定を変えました。</p>

<ul>
<li><a href="http://andr.esmejia.com/posts/31-changing-ctrl-f-to-move-forward-on-textmate">Changing Ctrl+F to move forward on TextMate</a></li>
</ul>


<p>うーん、良い感じ！備忘録として記しました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimにphpコード補完のsnipMateとか]]></title>
    <link href="http://morizotter.com/blog/2012/07/20/vundle-snipmate/"/>
    <updated>2012-07-20T02:23:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/20/vundle-snipmate</id>
    <content type="html"><![CDATA[<p>vimにphpコード補完のsnipMateを入れてみました。例えば、<code>for</code>と入れると、</p>

<pre><code>for ($i = 0; $i &lt; count; $i++) {
     // code...
}
</code></pre>

<p>とか自動で出るやつです。使いこなしてはいませんが、少しは楽になりそう。</p>

<ul>
<li><a href="http://kaworu.jpn.org/kaworu/2009-10-03-1.php">vim snipMate の入力補完でプログラミングを高速化</a></li>
<li><a href="http://d.hatena.ne.jp/takkaw/20090517/p1">snipMate.vimをインストールしてみた</a></li>
</ul>


<p>このあたりを参考にさせていただきました。インストールはパッケージ管理のvundleでやりました。vimはまだまだわからないことがたくさん(>&lt;)。超軽量なので使いこなしていきたいところです!</p>

<p>あ、あと通常の設定部分もいろいろ追加してみました。バッファとかよくわからないので分かる範囲で。</p>

<pre><code>"---------------------------------
" 設定
"---------------------------------
set number
set shiftwidth=4
set showmatch
set smarttab
set tabstop=4
set expandtab
syntax on
</code></pre>

<p>分かる範囲なので少ないですね！</p>

<p>vimで何やら行頭に半角スペース一つ入れている人がたくさんいるんだけど、あれなんの意味があるんだろう。。知りたい。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バッチ・ファイルを作ってみた]]></title>
    <link href="http://morizotter.com/blog/2012/07/19/batch-file/"/>
    <updated>2012-07-19T22:23:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/19/batch-file</id>
    <content type="html"><![CDATA[<p>一般的な人はコマンドラインでPCを扱うことはないと思う。で、作業を自動化する仕組みをウェブで作ろうとも思ったんだけど、ちょっとこれは面倒だということでバッチ・ファイルの作り方を検索してみました。バッチ・ファイルというのは、コマンドラインから実行するのではなく、ファイルをダブルクリックすることで実行できるファイルのことだそうです(<a href="http://ja.wikipedia.org/wiki/%E3%83%90%E3%83%83%E3%83%81%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB">wikipedia</a>)。</p>

<ul>
<li><a href="http://sakuranon.blog.fc2.com/blog-entry-27.html">macでバッチファイル実行</a></li>
</ul>


<p>とりあえずすぐに出てきてわかり易かったのがここです。紹介されているリンク先とあわせて見れば、基本的なことは抑えつつ、ファイルを作成することができました。</p>

<p>作成したファイルはこれです。</p>

<pre><code>#!/bin/bash
MY_DIRNAME=$(dirname $0)
cd $MY_DIRNAME
ls -lha
</code></pre>

<ul>
<li>一行目はシェルを使うよということ</li>
<li>二行目はカレントディレクトリを読み込んでいるようです。</li>
<li>で、三行目でカレントディレクトリに移動します。</li>
<li>四行目で処理の実行です。</li>
</ul>


<p>ファイル名は<code>test.command</code>としました。で、これに<code>chmod u+x</code>で実行権限を与えます。ダブルクリックで使えました！次回はrubyを動かしてみよう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vundleの設定とやらを!]]></title>
    <link href="http://morizotter.com/blog/2012/07/18/vundle/"/>
    <updated>2012-07-18T22:39:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/18/vundle</id>
    <content type="html"><![CDATA[<p>Vimを使いこなしたいと思って、いろいろ調べていったらどうやらvundleを使ってプラグインを一元管理するのがよさそうということを知りました。そして良いサイトも幾つか！</p>

<ul>
<li><a href="http://www.curiosity-drives.me/2012/01/rails.html">今年こそ始める！何度も挫折した人のためのモダンVim再入門</a></li>
</ul>


<p>何はともあれ、ここを参考にすれば良いのではないでしょうか。参考になるYoutube動画や、理解を助けるリンクなどが充実しています。一番素晴らしいのは、この方の設定を一つ一つ説明してくれている点です。ここまで手取り足取り教えてもらえれば、すぐにある程度使いこなせるようになるんじゃないでしょうか。</p>

<p>とか思ったんですが、不可でした（汗）。<strong>今の僕には</strong>。</p>

<p>いきなり、参考の設定でが便利そうなプラグインをがっつり入れて、<code>:BundleInstall</code>したのですが、vimが全く分けのわからないものになってしまいました(;;)。多分、vimのシンプルなところが好きだった僕には高機能過ぎました。</p>

<p>いろいろ説明見ていて思ったのですが、標準状態でvimを使っている人にとってはこれ失敗したと思ったら<code>.vim/bundle</code>と、<code>.vimrc</code>を削除すれば元に戻ると思います。そのあたりの気楽さはいいですね。</p>

<p>で、まぁ消そうと思ったんですが、これから少しずつ試していくために基本設定だけは残しておこうと思って、ややこしそうなプラグインは全部<code>.vimrc</code>から削除して、<code>:BundleClean</code>しちゃいました。<code>:BundleClean</code>をすることで、<code>.vimrc</code>にないプラグインが<code>.vim/bundle</code>から削除されます。</p>

<p>で、残したのはこれ。</p>

<pre><code> set nocompatible               " be iMproved
 filetype off                   " required!
 set rtp+=~/.vim/bundle/vundle/
 call vundle#rc()
 " let Vundle manage Vundle
 " required!
 Bundle 'gmarik/vundle'
 "------------------------------------------------------------------


 "------------------------------------------------------------------
 filetype plugin indent on     " required!
 "
 " Brief help
 " :BundleList          - list configured bundles
 " :BundleInstall(!)    - install(update) bundles
 " :BundleSearch(!) foo - search(or refresh cache first) for foo
 " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
 "
 " see :h vundle for more details or wiki for FAQ
 " NOTE: comments after Bundle command are not allowed..
</code></pre>

<p>とりあえずの基本設定と、コマンドリストだけです。
これから１つずつ理解してから入れていこうと思います。そういえば、<code>set number</code>とか基本的なものはちょこちょこ書いておこう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TextMateを日本語化してみた]]></title>
    <link href="http://morizotter.com/blog/2012/07/18/textmate-japanese/"/>
    <updated>2012-07-18T20:13:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/18/textmate-japanese</id>
    <content type="html"><![CDATA[<p>Rubyを使っている人の8割（世界）はTextMateを使っているという情報をネットで見て、入れてみました。シェアウェアなのでとりあえず30日間のフリートライアル期間を過ぎたら購入するか決めます（多分買います）。</p>

<p><a href="http://macromates.com/">TextMate</a></p>

<p>使ってみて動作が軽快で気持ちいいですね！サクサク、コード補完があるとやっぱいいなぁ。でも、日本語の入力がちょっとおかしいのがマイナスポイント。これは定番の問題らしいので、ネット上に記事がたくさんありました。で、いろいろ見たんですが、結局下記の２つを参照すればとりあえずいけるかなと。</p>

<ol>
<li><a href="http://hisasann.com/housetect/2008/05/railstextmate.html">Railsに最適なテキストエディター「TextMate」を入れて日本語化してみた</a></li>
<li><a href="https://twitter.com/yusabana/statuses/194607922771263489">Google日本語入力のサジェストが邪魔な件に関するツイート</a></li>
</ol>


<p>上記２つを参考に設定完了。日本語が半角で表示されるのはちょっと…。だけどまぁ英語で補えばいいし、何より入力が気持ちいいので良い感じ。使って見てまた感想書きます！</p>

<p>次は、viをPHP用にカスタマイズしてみるぞ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon Cloud Driveを入れてみた]]></title>
    <link href="http://morizotter.com/blog/2012/07/17/amazon-cloud-drive/"/>
    <updated>2012-07-17T01:05:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/17/amazon-cloud-drive</id>
    <content type="html"><![CDATA[<p>ちょっと前にリリースされたAmazon Cloud Driveのデスクトップアプリを入れてみました。クラウドはDropboxで足りてるのですが。ふむふむ。デスクトップ側にはデータを置かない仕様のようですね。Kindleへの転送は別みたいだし、使うことあるかなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimもいいなと思ってVimtutorを試してみた]]></title>
    <link href="http://morizotter.com/blog/2012/07/16/vimtutor/"/>
    <updated>2012-07-16T02:26:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/16/vimtutor</id>
    <content type="html"><![CDATA[<p>ターミナルでの作業が快適なので、簡単なRubyなら専用のエディタじゃなくてもいいだろうということで、VimよりいろいろできそうなEmacsの学習を始めました。しかし！やっぱりVimの気軽さが気になってもう一回Vimも学んでみようと思い、vimtutorをやって見ることにしました。</p>

<h2>冒頭：</h2>

<pre><code>Note: カーソルキーでも移動できます。しかし hjkl に一度慣れてしまえば、はるかに速く移動することができるでしょう。いやマジで!
</code></pre>

<p>出だしからすごいな！期待できるかも。</p>

<h2>メモ：</h2>

<p><strong>文字の置き換え</strong></p>

<pre><code>:s/oldword/newword/
</code></pre>

<p>最後にgをつけると一行分置き換わる</p>

<p><strong>アンドゥ</strong></p>

<pre><code>u
</code></pre>

<p><strong>アンドゥをキャンセル</strong></p>

<pre><code>Ctr+r
</code></pre>

<p><strong>カーソルの移動</strong></p>

<pre><code>ワードの先頭  : w
ワードの最後  : e
行の先頭 : 0
行の最後 : $
</code></pre>

<p><strong>置き換え</strong></p>

<pre><code>一文字 : r
一文字以上 : R
</code></pre>

<p><strong>削除</strong></p>

<pre><code>x
</code></pre>

<p><strong>コピー</strong></p>

<pre><code>ヴィジュアルモードで選択範囲をy
yw で単語コピー。同じようにy$で文の最後までコピー
</code></pre>

<p>yは<a href="http://ejje.weblio.jp/content/Yank">yank</a></p>

<p><strong>貼り付け</strong></p>

<pre><code>p
</code></pre>

<p>pはput</p>

<p><strong>行の移動</strong></p>

<pre><code>行ナンバーG
Ctr+Gで現在の行表示
Gでテキスト最後の行
ggでテキスト最初の行
</code></pre>

<p><strong>外部コマンドを利用する</strong></p>

<pre><code>:!ここにコマンドを入れる。
(例):!ls -lha
</code></pre>

<p><strong>外部テキストを読み込み</strong></p>

<pre><code>:r テキスト名
(例):r test.txt
(例):r !ls -lha
</code></pre>

<p>使いそうなキーをまとめました。このチュートリアルよくできてます。Vimの使い方がいまいちわからないという人は是非試してみてください！</p>
]]></content>
  </entry>
  
</feed>
