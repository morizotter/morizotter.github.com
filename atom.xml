<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MORIZOTTER PRESS]]></title>
  <link href="http://morizotter.com/atom.xml" rel="self"/>
  <link href="http://morizotter.com/"/>
  <updated>2012-07-26T01:26:01+09:00</updated>
  <id>http://morizotter.com/</id>
  <author>
    <name><![CDATA[morizotter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dashが快適！]]></title>
    <link href="http://morizotter.com/blog/2012/07/26/dash/"/>
    <updated>2012-07-26T00:52:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/26/dash</id>
    <content type="html"><![CDATA[<p>先日、Macおすすめアプリって記事をどこかで見て入れたのがDash。プログラミング言語の閲覧とコードスニペットの管理が主な用途ですが、利用開始直後からかなりよい具合で愛してます。</p>

<p><img src="http://dl.dropbox.com/u/8131276/octopress/dash.png"></p>

<p>とりあえず今貼りつけた画像は、ドキュメント表示画面です。検索早いです。そして、<code>option+Space</code>でDash自体が一発起動するってのも素敵です。</p>

<p>スニペット管理画面もあります。ここにスニペットを書き込めば指定した文字を打つと即コードが差し込まれます。スニペット中に<code>__</code>で囲んだ文字、例えば<code>__filename__</code>なんてやると、スニペットを差し込む前にその部分が選択されて自由に差し込めるようになっています。</p>

<h2>Dropboxで共有</h2>

<p>スニペットを格納したファイルはDropboxに入れることで、複数のMacで情報を共有できます。わかりやすいサイトを見つけたので興味のある方はご参考に。</p>

<ul>
<li><a href="http://fujitaiju.com/blog/%E3%82%A2%E3%83%97%E3%83%AA/%E5%A4%AAmac%E7%94%A8%E3%82%B9%E3%83%8B%E3%83%9A%E3%83%83%E3%83%88%E3%82%A2%E3%83%97%E3%83%AAdashexpander%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92dropbox%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E5%90%8C/">[太]Mac用スニペットアプリDashExpanderの設定をDropboxを使って同期する方法。</a></li>
</ul>


<p>あー、でも一つだけよくわからずいらっときている点が。PreferencesのSnippetsにある<code>enable snippet detection</code>をオンにすると何が変わるのか。うううー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xcode4.4でコード補完できなくなる問題が解消！？]]></title>
    <link href="http://morizotter.com/blog/2012/07/26/xcode4-dot-4/"/>
    <updated>2012-07-26T00:20:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/26/xcode4-dot-4</id>
    <content type="html"><![CDATA[<p>おお、Xcodeのアップデート文を読んでいたら嬉しい一文を発見！</p>

<p><img src="http://dl.dropbox.com/u/8131276/octopress/xcode44.png"></p>

<p>赤枠内です。コード補完ができなくなる問題を解消と書いてあります。</p>

<pre><code>Fixes an issue where code completion could fail, requiring the user to delete derived data.
</code></pre>

<p>&#8220;ユーザにderived dataの削除を要求する&#8221;って、そういう状況に追い込まれた人にはすっと入り込むわかりやすいフレーズ。この問題に何度悩まされたことか！でも、derived dataを削除したくらいじゃ回復しなかったこともあったしなぁ。</p>

<p>そういうのが起こらないようになってるならすごくいいアップデート！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[textMateでテスト実行時のRubyのバージョンを変更する！]]></title>
    <link href="http://morizotter.com/blog/2012/07/23/textmate-ruby-version/"/>
    <updated>2012-07-23T00:45:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/23/textmate-ruby-version</id>
    <content type="html"><![CDATA[<p>こんにちは。Ruby初心者です！Rubyを始めてとりあえずエディタを探していたのですが、vimは初期設定が難しいしファイル間の移動が面倒だし、NetBeansは大げさだしということでtextMateに落ち着きそうです。で、使っているうちに最初の問題に遭遇しました。</p>

<h2>実行(⌘+r)時に古いRubyで実行してる</h2>

<p>問題が発覚したのは、<a href="http://www.amazon.co.jp/gp/product/4797336617/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4797336617&linkCode=as2&tag=nettoshinjiyu-22">たのしいRuby 第2版 Rubyではじめる気軽なプログラミング</a><img src="http://www.assoc-amazon.jp/e/ir?t=nettoshinjiyu-22&l=as2&o=9&a=4797336617" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />の記述通りにコードを書いているのに、なぜか実行時に失敗するということが続いたからです。</p>

<p><code>Command+R</code>時に表示されるウィンドウを見るとRubyのバージョンが表示されていました。</p>

<p><img src="http://dl.dropbox.com/u/8131276/octopress/textMateversion.png"></p>

<p><em>画像は修正後のものです。赤枠内が古いバージョンを示していました</em></p>

<p>これが古かったんです。それでおそらく<code>require</code>が失敗していたんだと思います。とりあえず、terminalで実行した場合は成功するので、普段使っている<code>ruby 1.9.3p194</code>に変えればよいだろうということで、ネットで情報を探しました。</p>

<p>なかなか見つからなかったのですが、下記の記事に回答に近いものがありました。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/6546308/how-do-i-change-the-ruby-version-textmate-uses">How do I change the Ruby version Textmate uses?</a></li>
</ul>


<p>方法としては、</p>

<ol>
<li>textMateのPreference>Advanced>Shell Variablesに移動する</li>
<li>titleを<code>TM_RUBY</code>として、rubyのパスを入力する</li>
</ol>


<p>これだけで完了です。ただ僕はここで少しつまずきました。rubyの場所を</p>

<pre><code>$ which ruby
</code></pre>

<p>で調べると、</p>

<pre><code>/Users/myname/.rbenv/shims/ruby
</code></pre>

<p>と出てきたので、最初これを指定したのですがエラーになりました。おそらくこれはただの参照だからダメだったんだと思います（詳しい方教えて下さい＞＜）。下記のように入力することで成功しました。</p>

<pre><code>/Users/myname/.rbenv/versions/1.9.3-p194/bin/ruby
</code></pre>

<p>これで、実行すると対処の画像の用に指定したRubyのバージョンで実行ができます。ふー、わざわざターミナルで実行するよりも一画面で実行できるのでストレスなく効率的にテストができます！わーい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[textMateのcontrol+f]]></title>
    <link href="http://morizotter.com/blog/2012/07/20/textmate-control-f/"/>
    <updated>2012-07-20T03:34:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/20/textmate-control-f</id>
    <content type="html"><![CDATA[<p>textMateはMacやEmacsと同じように<code>Ctr+f,b,p,n</code>でサクサク動けると思ったんだけど、思ったんだけど、なんか変。止まる。なんか表示される。調べてみると、<code>Ctr+f</code>の設定が変わったということ。今は定義を調べるコマンドになっているらしい。そこで、下記のサイトを参考に、ショートカットキーの設定を変えました。</p>

<ul>
<li><a href="http://andr.esmejia.com/posts/31-changing-ctrl-f-to-move-forward-on-textmate">Changing Ctrl+F to move forward on TextMate</a></li>
</ul>


<p>うーん、良い感じ！備忘録として記しました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimにphpコード補完のsnipMateとか]]></title>
    <link href="http://morizotter.com/blog/2012/07/20/vundle-snipmate/"/>
    <updated>2012-07-20T02:23:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/20/vundle-snipmate</id>
    <content type="html"><![CDATA[<p>vimにphpコード補完のsnipMateを入れてみました。例えば、<code>for</code>と入れると、</p>

<pre><code>for ($i = 0; $i &lt; count; $i++) {
     // code...
}
</code></pre>

<p>とか自動で出るやつです。使いこなしてはいませんが、少しは楽になりそう。</p>

<ul>
<li><a href="http://kaworu.jpn.org/kaworu/2009-10-03-1.php">vim snipMate の入力補完でプログラミングを高速化</a></li>
<li><a href="http://d.hatena.ne.jp/takkaw/20090517/p1">snipMate.vimをインストールしてみた</a></li>
</ul>


<p>このあたりを参考にさせていただきました。インストールはパッケージ管理のvundleでやりました。vimはまだまだわからないことがたくさん(>&lt;)。超軽量なので使いこなしていきたいところです!</p>

<p>あ、あと通常の設定部分もいろいろ追加してみました。バッファとかよくわからないので分かる範囲で。</p>

<pre><code>"---------------------------------
" 設定
"---------------------------------
set number
set shiftwidth=4
set showmatch
set smarttab
set tabstop=4
set expandtab
syntax on
</code></pre>

<p>分かる範囲なので少ないですね！</p>

<p>vimで何やら行頭に半角スペース一つ入れている人がたくさんいるんだけど、あれなんの意味があるんだろう。。知りたい。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バッチ・ファイルを作ってみた]]></title>
    <link href="http://morizotter.com/blog/2012/07/19/batch-file/"/>
    <updated>2012-07-19T22:23:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/19/batch-file</id>
    <content type="html"><![CDATA[<p>一般的な人はコマンドラインでPCを扱うことはないと思う。で、作業を自動化する仕組みをウェブで作ろうとも思ったんだけど、ちょっとこれは面倒だということでバッチ・ファイルの作り方を検索してみました。バッチ・ファイルというのは、コマンドラインから実行するのではなく、ファイルをダブルクリックすることで実行できるファイルのことだそうです(<a href="http://ja.wikipedia.org/wiki/%E3%83%90%E3%83%83%E3%83%81%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB">wikipedia</a>)。</p>

<ul>
<li><a href="http://sakuranon.blog.fc2.com/blog-entry-27.html">macでバッチファイル実行</a></li>
</ul>


<p>とりあえずすぐに出てきてわかり易かったのがここです。紹介されているリンク先とあわせて見れば、基本的なことは抑えつつ、ファイルを作成することができました。</p>

<p>作成したファイルはこれです。</p>

<pre><code>#!/bin/bash
MY_DIRNAME=$(dirname $0)
cd $MY_DIRNAME
ls -lha
</code></pre>

<ul>
<li>一行目はシェルを使うよということ</li>
<li>二行目はカレントディレクトリを読み込んでいるようです。</li>
<li>で、三行目でカレントディレクトリに移動します。</li>
<li>四行目で処理の実行です。</li>
</ul>


<p>ファイル名は<code>test.command</code>としました。で、これに<code>chmod u+x</code>で実行権限を与えます。ダブルクリックで使えました！次回はrubyを動かしてみよう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vundleの設定とやらを!]]></title>
    <link href="http://morizotter.com/blog/2012/07/18/vundle/"/>
    <updated>2012-07-18T22:39:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/18/vundle</id>
    <content type="html"><![CDATA[<p>Vimを使いこなしたいと思って、いろいろ調べていったらどうやらvundleを使ってプラグインを一元管理するのがよさそうということを知りました。そして良いサイトも幾つか！</p>

<ul>
<li><a href="http://www.curiosity-drives.me/2012/01/rails.html">今年こそ始める！何度も挫折した人のためのモダンVim再入門</a></li>
</ul>


<p>何はともあれ、ここを参考にすれば良いのではないでしょうか。参考になるYoutube動画や、理解を助けるリンクなどが充実しています。一番素晴らしいのは、この方の設定を一つ一つ説明してくれている点です。ここまで手取り足取り教えてもらえれば、すぐにある程度使いこなせるようになるんじゃないでしょうか。</p>

<p>とか思ったんですが、不可でした（汗）。<strong>今の僕には</strong>。</p>

<p>いきなり、参考の設定でが便利そうなプラグインをがっつり入れて、<code>:BundleInstall</code>したのですが、vimが全く分けのわからないものになってしまいました(;;)。多分、vimのシンプルなところが好きだった僕には高機能過ぎました。</p>

<p>いろいろ説明見ていて思ったのですが、標準状態でvimを使っている人にとってはこれ失敗したと思ったら<code>.vim/bundle</code>と、<code>.vimrc</code>を削除すれば元に戻ると思います。そのあたりの気楽さはいいですね。</p>

<p>で、まぁ消そうと思ったんですが、これから少しずつ試していくために基本設定だけは残しておこうと思って、ややこしそうなプラグインは全部<code>.vimrc</code>から削除して、<code>:BundleClean</code>しちゃいました。<code>:BundleClean</code>をすることで、<code>.vimrc</code>にないプラグインが<code>.vim/bundle</code>から削除されます。</p>

<p>で、残したのはこれ。</p>

<pre><code> set nocompatible               " be iMproved
 filetype off                   " required!
 set rtp+=~/.vim/bundle/vundle/
 call vundle#rc()
 " let Vundle manage Vundle
 " required!
 Bundle 'gmarik/vundle'
 "------------------------------------------------------------------


 "------------------------------------------------------------------
 filetype plugin indent on     " required!
 "
 " Brief help
 " :BundleList          - list configured bundles
 " :BundleInstall(!)    - install(update) bundles
 " :BundleSearch(!) foo - search(or refresh cache first) for foo
 " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
 "
 " see :h vundle for more details or wiki for FAQ
 " NOTE: comments after Bundle command are not allowed..
</code></pre>

<p>とりあえずの基本設定と、コマンドリストだけです。
これから１つずつ理解してから入れていこうと思います。そういえば、<code>set number</code>とか基本的なものはちょこちょこ書いておこう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TextMateを日本語化してみた]]></title>
    <link href="http://morizotter.com/blog/2012/07/18/textmate-japanese/"/>
    <updated>2012-07-18T20:13:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/18/textmate-japanese</id>
    <content type="html"><![CDATA[<p>Rubyを使っている人の8割（世界）はTextMateを使っているという情報をネットで見て、入れてみました。シェアウェアなのでとりあえず30日間のフリートライアル期間を過ぎたら購入するか決めます（多分買います）。</p>

<p><a href="http://macromates.com/">TextMate</a></p>

<p>使ってみて動作が軽快で気持ちいいですね！サクサク、コード補完があるとやっぱいいなぁ。でも、日本語の入力がちょっとおかしいのがマイナスポイント。これは定番の問題らしいので、ネット上に記事がたくさんありました。で、いろいろ見たんですが、結局下記の２つを参照すればとりあえずいけるかなと。</p>

<ol>
<li><a href="http://hisasann.com/housetect/2008/05/railstextmate.html">Railsに最適なテキストエディター「TextMate」を入れて日本語化してみた</a></li>
<li><a href="https://twitter.com/yusabana/statuses/194607922771263489">Google日本語入力のサジェストが邪魔な件に関するツイート</a></li>
</ol>


<p>上記２つを参考に設定完了。日本語が半角で表示されるのはちょっと…。だけどまぁ英語で補えばいいし、何より入力が気持ちいいので良い感じ。使って見てまた感想書きます！</p>

<p>次は、viをPHP用にカスタマイズしてみるぞ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon Cloud Driveを入れてみた]]></title>
    <link href="http://morizotter.com/blog/2012/07/17/amazon-cloud-drive/"/>
    <updated>2012-07-17T01:05:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/17/amazon-cloud-drive</id>
    <content type="html"><![CDATA[<p>ちょっと前にリリースされたAmazon Cloud Driveのデスクトップアプリを入れてみました。クラウドはDropboxで足りてるのですが。ふむふむ。デスクトップ側にはデータを置かない仕様のようですね。Kindleへの転送は別みたいだし、使うことあるかなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimもいいなと思ってVimtutorを試してみた]]></title>
    <link href="http://morizotter.com/blog/2012/07/16/vimtutor/"/>
    <updated>2012-07-16T02:26:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/16/vimtutor</id>
    <content type="html"><![CDATA[<p>ターミナルでの作業が快適なので、簡単なRubyなら専用のエディタじゃなくてもいいだろうということで、VimよりいろいろできそうなEmacsの学習を始めました。しかし！やっぱりVimの気軽さが気になってもう一回Vimも学んでみようと思い、vimtutorをやって見ることにしました。</p>

<h2>冒頭：</h2>

<pre><code>Note: カーソルキーでも移動できます。しかし hjkl に一度慣れてしまえば、はるかに速く移動することができるでしょう。いやマジで!
</code></pre>

<p>出だしからすごいな！期待できるかも。</p>

<h2>メモ：</h2>

<p><strong>文字の置き換え</strong></p>

<pre><code>:s/oldword/newword/
</code></pre>

<p>最後にgをつけると一行分置き換わる</p>

<p><strong>アンドゥ</strong></p>

<pre><code>u
</code></pre>

<p><strong>アンドゥをキャンセル</strong></p>

<pre><code>Ctr+r
</code></pre>

<p><strong>カーソルの移動</strong></p>

<pre><code>ワードの先頭  : w
ワードの最後  : e
行の先頭 : 0
行の最後 : $
</code></pre>

<p><strong>置き換え</strong></p>

<pre><code>一文字 : r
一文字以上 : R
</code></pre>

<p><strong>削除</strong></p>

<pre><code>x
</code></pre>

<p><strong>コピー</strong></p>

<pre><code>ヴィジュアルモードで選択範囲をy
yw で単語コピー。同じようにy$で文の最後までコピー
</code></pre>

<p>yは<a href="http://ejje.weblio.jp/content/Yank">yank</a></p>

<p><strong>貼り付け</strong></p>

<pre><code>p
</code></pre>

<p>pはput</p>

<p><strong>行の移動</strong></p>

<pre><code>行ナンバーG
Ctr+Gで現在の行表示
Gでテキスト最後の行
ggでテキスト最初の行
</code></pre>

<p><strong>外部コマンドを利用する</strong></p>

<pre><code>:!ここにコマンドを入れる。
(例):!ls -lha
</code></pre>

<p><strong>外部テキストを読み込み</strong></p>

<pre><code>:r テキスト名
(例):r test.txt
(例):r !ls -lha
</code></pre>

<p>使いそうなキーをまとめました。このチュートリアルよくできてます。Vimの使い方がいまいちわからないという人は是非試してみてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ディレクトリ下のファイル数をカウントする]]></title>
    <link href="http://morizotter.com/blog/2012/07/16/file-count/"/>
    <updated>2012-07-16T00:49:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/16/file-count</id>
    <content type="html"><![CDATA[<p>今日Rubyの小さなコマンドを書いたファイルを作りまくっていたのですが、どれだけ作った知りたくなりました。で、検索したところわかりやすい記事が。</p>

<p><a href="http://linux.just4fun.biz/%E9%80%86%E5%BC%95%E3%81%8DUNIX%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%95%B0%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B.html">ファイル数を取得する方法</a></p>

<p>基本、このリンク先を見れば解決すると思います。自分メモとして記録しておきます。結論としては、</p>

<pre><code>$ ls -1 | wc -l
</code></pre>

<p>ですね。<code>ls</code>の<code>-l</code>オプションでファイルを1行表示にし、パイプでwcにつなげるということらしいです。</p>

<p><a href="http://www.k-tanaka.net/unix/wc.html">wc</a>は行数や単語数、バイト数をカウントするコマンドで、行数のみカウントする場合は、<code>-l</code>オプションを付けます。この<a href="http://www.k-tanaka.net/unix/">UNIXコマンド</a>ってサイトいいな！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[うっほ！US配列でControlの位置を変更！]]></title>
    <link href="http://morizotter.com/blog/2012/07/15/mac-control/"/>
    <updated>2012-07-15T16:08:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/15/mac-control</id>
    <content type="html"><![CDATA[<p>こんにちは。</p>

<p>US配列キーボードが気に入ってます。<a href="http://www.morizotter.com/blog/2012/07/07/us-keyboard-key-remap/">日本語、英語変換をJISキーボードと同じように設定</a>してから、更に使い勝手が良くなってます。</p>

<p>で、実はもうひとつ困っている問題がありました。Controlの位置です。USキーボードの場合、Controlがかなり下の方にあるので、入力するときに小指がガッと下がってかなり手が痛いし不自然なんですね。Emacsを練習していたらそれが顕著にダメージとなって現れてきました。それ以外はUSキーボードのキーはJISよりもスペースキーから近い感じがするので楽になんですが。。。</p>

<p>で、<strong>caps lock</strong>キーにControlの機能をもたせることにしました。</p>

<p>やり方はわかってたのですが、検索してみると<a href="http://firstmac.blogspot.jp/2007/08/caps-lock-control.html">こんな記事</a>も出てきて、みんなやってるらしいし良いだろうということで。</p>

<pre><code>環境設定 &gt; キーボード &gt; 装飾キー
</code></pre>

<p>で割り当てを変えます。caps lockキーは使わないと思うので、controlキーの機能はそのまま残しました。</p>

<p>うーん、快適！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyを書いていたらEmacsが使いたくなった]]></title>
    <link href="http://morizotter.com/blog/2012/07/15/emacs/"/>
    <updated>2012-07-15T16:02:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/15/emacs</id>
    <content type="html"><![CDATA[<p>RubyではIDEを使わない。エディタで書く。らしいです。で、世界で一番使われているRuby用エディタのTextMateは日本語が使えない。TextMate2は出力はできるようですが、入力に難ありという事です。まぁ、エディタ探す前にVimでやっていて、不便感じないしいちいちソフトを立ち上げなくて済むので楽だなと感じていたのでした。</p>

<p>ただ、Vimの操作にはやっぱりなれない。カーソルの移動などが面倒。Control+F,B,P,Nで移動したい！ということで、Emacsの方がいいような気がしてきました。</p>

<h2>一覧</h2>

<ul>
<li><p><a href="http://www.unixuser.org/~euske/doc/emacsref/">Emacsクイックリファレンス</a></p>

<ul>
<li>こちらのサイトの一覧がわかり易かったので、これをiPadに表示しながらいろいろやっていこうと思っています。</li>
</ul>
</li>
<li><p><a href="http://www.k-tanaka.net/unix/emacs.html">Unixコマンド(Emacs)</a></p>

<ul>
<li>こちらも分かりやすそう。</li>
</ul>
</li>
<li><p><a href="http://e-sahf.jp/class/12/emacs.htm">emacs操作方法</a></p>

<ul>
<li>こちらも。</li>
</ul>
</li>
</ul>


<p>後ろに行くにつれてわかりやすくなってるかも。ちなみに、emacsのとじ方がわからず、emacs操作方法を見つけて本当に助かりましたよ。。。</p>

<h2>Ctr + Spaceの問題</h2>

<p>Emacsを練習していると、どうやらMacの初期設定で<code>Ctr+Space</code>でSpotlightが開いてしまうようなので<a href="http://osuban.jp/devdi/?p=665">ここ</a>を参考にキーバインドを変更しました。</p>

<h2>メタキーの問題</h2>

<p>EmacsでMetaキーをよく使うのですが、これがMacの標準だと<code>esc</code>に設定されているようです。これだと遠い！そこで調べてみたところ、<a href="http://d.hatena.ne.jp/goinger/20090104/1231048095">こんな記事</a>がありまして、参考にしてみました。で、普段使っているiTermで設定しようとしたらメッセージが。</p>

<p><img class="centr" src="http://dl.dropbox.com/u/8131276/octopress/emacs-iterm.png"></p>

<p>メッセージどおり<code>+esc</code>の方にしてみました。とりあえずこの設定でやってみます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading: たのしいRuby]]></title>
    <link href="http://morizotter.com/blog/2012/07/15/tanoshii-ruby/"/>
    <updated>2012-07-15T13:52:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/15/tanoshii-ruby</id>
    <content type="html"><![CDATA[<p>とりあえず、コーディングの全体的な復讐の意味も含めて<strong>たのしいRuby</strong>を読み始めています。書きながら読んでいますが、Rubyって楽しいです！自分の使っているRubyのバージョンが<strong>ruby 1.9.3p194</strong>なのですが、書籍の記述どおりに行かなかった部分や、ポイントになる部分をメモっておきます。</p>

<p>ちなみに、途中くらいまで読んで気づいたのですが、<a href="http://www.notwork.org/tanoshiiruby3/">サポートページ</a>に正誤表があり、どうしても動かないメソッドなどはこちらに目を通すと良いかもしれません。練習問題の回答等もあり、必要な情報がわかりやすくまとまっています。</p>

<h2>日本語を正しく表示するために</h2>

<p><em>p16</em></p>

<pre><code># encoding: UTF-8
</code></pre>

<p>をファイル冒頭に追加する。</p>

<h2>requireができない</h2>

<p><em>p.31</em></p>

<p>同じディレクトリ内にある<code>hello.rb</code>が読み込み出来ません。</p>

<pre><code>require "hello"
</code></pre>

<p>本書にあるこれを、</p>

<pre><code>require "./hello.rb"
</code></pre>

<p>に書き換えたら読み込みました。</p>

<!-- more -->


<p>ちなみに、ここでエディタをEmacsに変えて作業を始めました。Emacs学習時間が数十分。あー、それにしても普段から使ってる<code>Ctr+*</code>が使えるってのがでかいですね！コピーなどもVimに比べたら直感的です！</p>

<p>書きかけの記事です。</p>

<h2>比較</h2>

<p><em>p69</em></p>

<p>オブジェクトの比較は<code>equal?</code>。</p>

<pre><code>p obj1.equal?(obj2)     #=&gt; true
</code></pre>

<p>値の比較は、<code>==</code>か<code>eql?</code>。<code>eql?</code>はクラスの違いも判定する。数値の場合は注意する。</p>

<pre><code>p 1.0 == 1      #=&gt;true
p 1.0.eql? 1    #=&gt;false
</code></pre>

<h2>ARGV</h2>

<p><em>p49</em></p>

<p>コマンドラインから入力された値を格納する配列。値は文字列で渡ってくるので注意が必要。整数の場合、</p>

<pre><code>ARGV[0].to_i
</code></pre>

<p>のような形で変換する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LogMeInでMacにアクセス]]></title>
    <link href="http://morizotter.com/blog/2012/07/15/logmein/"/>
    <updated>2012-07-15T02:08:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/15/logmein</id>
    <content type="html"><![CDATA[<p>うむぅ。微妙。微妙だけど、まぁ、とにかく自宅マックじゃなきゃ作業できないってときは重宝するね。というのはLogMeInの話です。LogMeInはPCにリモートアクセスできるアプリです。ちなみに、今この記事もMacにアクセスして作成したテキストファイルにiPad側で書き込みをしています。</p>

<p><strong>微妙な点</strong></p>

<ul>
<li>日本語、英語の切り替えが面倒

<ul>
<li>できないこともないのですが、Mac側で設定しなければいけません。キーボードのショートカットが使えないので、結局、メニューバーのことえりやらGoogle日本語入力やらをタップして変更ます。。。</li>
</ul>
</li>
<li>アンダーバーが押せない。なぜか外付けキーボードだとアンダーバーが押せません。IMEのキーボードパットを出して、押しています。。。</li>
</ul>


<p>まぁそうは言っても、簡単にMacにアクセスできるのは素晴らしいですね！旅行先でも気軽にOctopressで投稿できそうですw Octopressは便利なんですが、ターミナル使う必要がありますからねぇ。。sshで接続すればいいのかもしれないのですが、ちょっと設定が面倒なので、まぁほとんど使う機会もないですし、LogMeInをもう少し使い続けそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressをHerokuにデプロイ]]></title>
    <link href="http://morizotter.com/blog/2012/07/14/octopress-ruby-heroku/"/>
    <updated>2012-07-14T15:38:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/14/octopress-ruby-heroku</id>
    <content type="html"><![CDATA[<p>Octopress好きが続いています。最初に作ったこのブログがコーディングをテーマにしたものとしてある程度落ち着いてきたので、同じような感じで旅行とビジネスをテーマにしたブログ作成に挑戦してみました。githubでのホスティングはこのブログでやってしまったので、前から気になっていた<a href="http://www.heroku.com/">Heroku</a>でのデプロイを試してみようと思います。で、ブログには躓いたポイントを記しておきます。</p>

<p>基本は、<a href="http://octopress.org/docs/setup/">Octopress Setup</a>を参考に勧めていきます。</p>

<h2>はまり1: Rubyのバージョンがない？？</h2>

<p>Rubyは1.9.3-p194が入っているはずなのに、cloneしたフォルダに入ると、</p>

<pre><code>rbenv: version `1.9.2-p290' is not installed
</code></pre>

<p>という謎のエラーが出て進みませんでした。Rubyの設定ファイルか何かでlocalのRubyが指定されているのでしょうか？</p>

<pre><code>$ rbenv local 1.9.3-p194
</code></pre>

<p>でlocalのRubyを変更してエラーはクリアしました（パッケージ管理はHomebrew, Rubyのバージョン管理はrbenvでやってます）。</p>

<p>その後、以前と同様まだちゃんと理解していない、<code>gem install bundler</code>など手順通りにやっていきます。</p>

<p><a href="http://octopress.org/docs/deploying/heroku/">Using Octopress With Heroku</a>へ進みます。</p>

<h2>はまり2: herokuコマンドがnot found</h2>

<p>資料にそって<code>gem install heroku</code>やったのに、<code>heroku</code>コマンドが使えない！</p>

<pre><code>-bash: heroku: command not found
</code></pre>

<p>勝手にパスを追加して良いかとかまだ曖昧なのでとりあえず<a href="https://devcenter.heroku.com/articles/cli-command-not-found">herokuのTroubleShooting</a>を見て以下を実行。</p>

<pre><code>$ gem environment
</code></pre>

<p>すると、PATHの場所として、</p>

<pre><code> - GEM PATHS:
    - /Users/&lt;username&gt;/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1
    - /Users/&lt;username&gt;/.gem/ruby/1.9.1
</code></pre>

<p>こんなかんじで出てきた。そのあたりでherokuコマンドを探したら、</p>

<pre><code>/Users/&lt;username&gt;/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/heroku
</code></pre>

<p>こんなところにあった。おしい。とりあえず上記の長いパスを入れてherokuコマンドを実行。herokuのサイトで登録したemailとパスワード聞かれたので入れたら自動的にmacのsshの情報が転送されていった。で、remoteにherokuが追加された。</p>

<pre><code>$ git remote -v
git@heroku.com:stormy-lightning-9306.git (fetch)
heroku  git@heroku.com:stormy-lightning-9306.git (push)
origin  git://github.com/imathis/octopress.git (fetch)
origin  git://github.com/imathis/octopress.git (push)
</code></pre>

<p>このあと、パスの設定をしてみました。このあたり曖昧です。というかまぁ、パスを通すと長いパス打たなくて済むからいいよねというのは分かるんですが、$PATHに色々ぐちゃぐちゃ書いていいのかなと少し不安です。不安もありながら、<a href="https://devcenter.heroku.com/articles/cli-command-not-found">herokuのTroubleShooting</a>を参考に以下のようにやったところなんとかherokuコマンドを使えるようになりました。</p>

<pre><code>export PATH=/Users/&lt;username&gt;/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/heroku-2.28.12/bin:$PATH
</code></pre>

<p>やっと次のステップに進めます。。。</p>

<p>この後は順調でサイトが表示されるところまで行きました。</p>

<!-- more -->


<h2>はまり3: herokuアプリのリネーム。。</h2>

<p><code>heroku create</code>では自動でアプリ名が決められるため、すぐにこの名前の変更をトライしてみました。が、その後がうまくいかない。herokuのアプリのページで<strong>Rename</strong>した後、herokuのヘルプ<a href="https://devcenter.heroku.com/articles/renaming-apps">Renaming Apps from the CLI</a>と、<a href="http://d.hatena.ne.jp/Syunpei/20111202/1322806676">herokuでアプリケーションの名前を変更する方法</a>を参照して何とか行ったかのように見えたのですが、<code>rake generate</code>は使えるものの<code>rake deploy</code>が使えない。sshが拒否される。</p>

<p>んー。ただ、pushすれば画面は更新されている。githubでホストしてるのとなんか管理方法が違っていそう。一応記事も表示されるし問題はなさげなので、今日のところはここまでということで！（<code>rake gen_deploy</code>が気持ちがいいので使いたい。。）</p>

<h2>はまり4: 記事が更新されない!?</h2>

<p>その後。。。</p>

<p>サイトの表示と、一つ目の記事が投稿されたのは確認できたのですが、一向に次に投稿した長めの記事が更新されません。タイトルなど設定も変えていたので問題はそこにあると思い、いろいろ試した後に一旦アプリを削除して再度、作り直しました。一度経験していたらほんの数分でブログの構築まではできます。実はこの再作成の間に原因がわかったような気がしました。</p>

<p>さて、同じようにpushしましたが、サイトには何も変化がありません。そこで、</p>

<pre><code>rake generate
</code></pre>

<p>をやってみました。するとpublicフォルダにザクザク入ります。で、commitしてpush。さて！？</p>

<p>反映されました（＞＜）</p>

<p>ただ単に<code>rake generate</code>を忘れてただけだったみたいです！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitのブランチについて学ぶ]]></title>
    <link href="http://morizotter.com/blog/2012/07/14/git-branch/"/>
    <updated>2012-07-14T14:12:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/14/git-branch</id>
    <content type="html"><![CDATA[<p>調子に乗ってgitのブランチについても学ぼうと思います！最近、誰かが書いたブログ記事から学ぶことが多いのですが、これってなんて素晴らしいことなんでしょうね。知識の共有って善だと思います。確かに本の方がまとまっていたり、全体を俯瞰できたりする点は優れているのですが、個人のブログのほうがリアルでしかも情報量が適切で飽きません。また、書いた人の個性や工夫などが感じられて楽しいです！</p>

<p>では、gitのbranchについて。</p>

<p>基本的にはメインにmasterがあって、masterに変更を加えずbranchでいろいろ作業進めていって、良い感じだったらmasterにmergeするっていうのが今の漠然とした理解です。</p>

<p>始めます。参考にしたのは、<a href="http://d.hatena.ne.jp/zariganitosh/20080912/1221260782">アリスがチャレンジなコードを書く時、git branchをちゃんと理解したい！</a>です。うー、これも結構前の記事なんだなぁ。僕がプログラミングをはじめたタイミングより2年も昔だ。</p>

<p>作業前の僕のbranchの状態はこんなかんじです。</p>

<pre><code>$ git branch
* master
</code></pre>

<p>ここで、</p>

<pre><code>$ git branch challenge
</code></pre>

<p>で、branchを作ります。こんな状態になります。</p>

<pre><code>$ git branch
  challenge
* master
</code></pre>

<p>branchが作成されました。作業branchを変更して、現在どのbranchにいるか表示します。</p>

<pre><code>$ git checkout challenge
$ git branch
* challenge
  master
</code></pre>

<!-- more -->


<p>こんな感じになりました。現在の作業branchはchallengeです。とりあえずこの状態でファイルに変更を加えて、新たにファイルを作成して<code>git add .</code>してcommitしてみました。現在のファイルです。</p>

<pre><code>$ ls
t.txt   u.txt
</code></pre>

<p>この状態で、masterブランチに変更してみます。</p>

<pre><code>$ git checkout master
Switched to branch 'master'
$ git branch
  challenge
* master
$ ls
t.txt
</code></pre>

<p>うほ。良い感じ。ファイルの中身を見ても先ほど加えた変更が何にも反映されてません!ちょっとここから参考にしているブログが難しくなってくるのでちょっと飛ばして、masterで今の変更をmergeします。</p>

<pre><code>$ git merge challenge
$ ls
t.txt   u.txt
</code></pre>

<p>できました！良い感じ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitで現在と過去をいったりきたり]]></title>
    <link href="http://morizotter.com/blog/2012/07/14/git-git/"/>
    <updated>2012-07-14T01:34:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/14/git-git</id>
    <content type="html"><![CDATA[<p>さて、gitの学習の時間です。今では毎日暇さえあればgitしてます。なんか気持ちいいんですよね。でも、せっかくgitを使っているのにコミットするばかりで、あまり過去の履歴を見たり過去に戻ったりしていません。</p>

<p>これからちょっと、過去に戻ったり、現在に戻ってきたりやってみようと思います。ネットで探したらよい記事がたくさん！</p>

<p>まずは、<a href="http://d.hatena.ne.jp/idesaku/20091106/1257507849">Git初心者が絶対に覚えておくべきコマンド</a>を参考に学習していきます！</p>

<h2>git &#8211;amend</h2>

<p><strong>直前のコミットを修正</strong></p>

<p><code>git --amend</code>で直前のコミットの内容を修正！できました！良い感じです。ちなみに、やり方としては、<code>git commit -m "t.txtを変更しまshia"</code>とか変なコミット文を打ってしまったときは、</p>

<pre><code>git --amend -m "t.txtを変更しました。"
</code></pre>

<p>とやれば直前のコミット文が上書きされます。またコード上でも、例えば<code>NSString *widht;</code>とかやっちゃっているときに、コードを修正して、<code>git add .</code>して、</p>

<pre><code>git --amend -m "適当なコミット文"
</code></pre>

<p>をすれば、直近のコミットが上書きされます。どっかの時点に戻ってしまうということもありません。これは便利！僕の場合、ついコミットしてしまってコミット後に動かしてアプリが落ちるので微修正して再度コミットということがちょくちょくあるので便利に使えそうです。</p>

<h2>git reset</h2>

<p><strong>指定位置まで戻る</strong></p>

<p>先ほどのコミットが終わったあと、logを出し、一応最新のSHAをメモってから、</p>

<pre><code>git reset HEAD^
</code></pre>

<p>とやってみました。すると最後のコミットをしていない状態に戻りました。<code>git log</code>で確認してみると、最後のコミットの情報が表示されません。ただ単にコミット前に戻っただけで、ソースは何も変わっていませんでした。git resetはHEADの位置を変更することが出来るようです。<code>^</code>はどのくらい前に戻るかということなんでしょうかね。うほ。HEADのいちを移動できるということは、新たにコミットしなければさっきの状態に戻れるかなと思い、以下のコマンドを実行してみました。</p>

<pre><code>git reset e66e5…(先ほどメモしたSHA)
</code></pre>

<p>すると、最新の状態に戻りました！<code>git status</code>とやっても変更点はないとメッセージが出るだけです。<code>git log</code>を確認して、２つ前に戻ってみました</p>

<pre><code>git reset ga1rg…（２つ前のSHA）
</code></pre>

<p>戻りました。というか、コードは全く変わってないのですが、2つ前より後にcommitしたものは、すべて未commitの状態に戻りました。この状態から最新の状態にも戻れました。更にもう一度2つ前の状態に戻って、</p>

<p><a href="http://transitive.info/article/git/command/checkout/">git checkoutの使い方</a>を参考に、修正されているファイルを修正前の状態に戻します。</p>

<pre><code>git checkout t.txt
</code></pre>

<p><code>git status</code>で見たところ、変更点はないというメッセージのみになりました。そして、この状態でちょっと変更を加えてコミット。更に、先ほどの最新の状態のSHAへ<code>git reset e66e5…(先ほどメモしたSHA)</code>で戻って見ることにしました。</p>

<p>ここで少々ややこしいことになりました。2つ前に戻って変更した部分が未コミットのadd候補、そしてe66e5…にはあるが2つ前に戻って変更したファイルにない部分がrm候補の未コミット状態で復活しました。とりあえず、ファイル自体は2つ前に戻って変更したものと変わらないようです。</p>

<p>ふむふむ。</p>

<p>そして最後に紹介されているのが、</p>

<h2>git reflog</h2>

<p><strong>HEADの変更の経緯を見ることができる</strong></p>

<p>ずらっと出てきた。</p>

<pre><code>c7d36af HEAD@{0}: reset: moving to c7d36af...
57a61a6 HEAD@{1}: commit: この状態の変更は？って文を追加
e66e588 HEAD@{2}: reset: moving to HEAD^
c7d36af HEAD@{3}: reset: moving to c7d36af...
0887fdb HEAD@{4}: reset: moving to 0887fdb...
c7d36af HEAD@{5}: reset: moving to c7d36af...
e66e588 HEAD@{6}: reset: moving to HEAD^
c7d36af HEAD@{7}: commit: -追加
e66e588 HEAD@{8}: commit (amend): コミット文を変更
6727c21 HEAD@{9}: commit (amend): 3
e130159 HEAD@{10}: commit: 3
0887fdb HEAD@{11}: commit: 更に文を追加
8d426c4 HEAD@{12}: commit: 文を追加
3c20bd5 HEAD@{13}: commit (initial): initial commit
</code></pre>

<p>ウホ、良い感じ。上記の&#8221;…&#8221;の部分は、伏せているだけで実際はちゃんとSHAが出てきます。これで、自分が作業してきたHEADの戻りたい部分に戻れるわけですね！</p>

<p>いや、このブログ分量も適切で説明もわかり易くほんとうに勉強になりました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MagicWandが届いた]]></title>
    <link href="http://morizotter.com/blog/2012/07/12/magicwand/"/>
    <updated>2012-07-12T00:47:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/12/magicwand</id>
    <content type="html"><![CDATA[<p><a href="http://www.morizotter.com/blog/2012/07/09/magictrackpad/">先日購入したMagicWand</a>が届きました！早速装着しています。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/magicwand1.jpg" width="400"></p>

<p>こんな感じ。デスクトップもTrackPadでやっぱりよいかもしれないと思いました。TrackPadは1軍昇格で、マウスが2軍落ちになりました。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/magicwand2.jpg" width="400"></p>

<p>結合部です。</p>

<p><img class="center" src="http://dl.dropbox.com/u/8131276/octopress/magicwand3.jpg" width="400"></p>

<p>横から見たところです。少し高さがあります。</p>

<p>使った感触としては、多少キーボードが重くなった感じがするものの、安定感は増しました。マウスほど手を動かさなくてもよいので、Macの動作が機敏になりました。結合部分のせいでタップがしづらくなったという意見も目にしたのですが、僕はタップでクリックの設定にしているので気になりません。</p>

<p>場所が定まるってのは大体の状況で快適になります！</p>

<p><a href="http://www.amazon.co.jp/gp/product/B004TTM0II/ref=as_li_ss_il?ie=UTF8&camp=247&creative=7399&creativeASIN=B004TTM0II&linkCode=as2&tag=morizotter0f-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B004TTM0II&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizotter0f-22" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizotter0f-22&l=as2&o=9&a=B004TTM0II" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>ちなみに、この記事はOctopressの<a href="http://octopress.org/docs/plugins/image-tag/">Image TagというPlugIn</a>を使って書きました。ちょっと詰まったけどなんとか行けました。httpsは読めないんだなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LaunchPad]]></title>
    <link href="http://morizotter.com/blog/2012/07/11/launchpad/"/>
    <updated>2012-07-11T00:08:00+09:00</updated>
    <id>http://morizotter.com/blog/2012/07/11/launchpad</id>
    <content type="html"><![CDATA[<p>今までDockにアプリケーションのフォルダのエイリアスを作ってたので、一切使ってなかったんだけど使ってみるとほんとうに便利。少なくともDockにアプリケーションのフォルダ置くよりは便利。フォルダもiOSっぽく綺麗にまとまるので美しい。</p>

<p>フォルダで管理するのと違ってページごとに並び替えができるのが地味にとても便利。大まかにページ分けして、よく使うアプリを上の方においておくと検索性も高まる。</p>

<p>全画面使うので一覧性がある。</p>

<p>いいことづくし。今までなぜ使わなかったか！（一因は前のAirが遅かったからだろうな。。）</p>
]]></content>
  </entry>
  
</feed>
